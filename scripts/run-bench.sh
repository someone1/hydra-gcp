#!/bin/bash

set -euo pipefail

pkill hydra || true
pkill hydragcp || true

cd "$( dirname "${BASH_SOURCE[0]}" )/.."

numReqs=10000
numParallel=100
clientId=benchclient
clientSecret=benchsecret
basicAuth=YmVuY2hjbGllbnQ6YmVuY2hzZWNyZXQ=
database="$(cut -d':' -f1 <<< "$DATABASE_URL")"
product="ORY Hydra"
filename="$database-$OAUTH2_ACCESS_TOKEN_STRATEGY.md"


if [ "$1" = './hydragcp' ]
then
    product="Hydra GCP"
fi

cat > $filename << EOF
# Hydra GCP Performance Benchmarks _(token strategy=$OAUTH2_ACCESS_TOKEN_STRATEGY, database=$database)_

In this document you will find benchmark results for different endpoints of $product. All benchmarks are executed
using [rakyll/hey](https://github.com/rakyll/hey). Please note that these benchmarks run against the $database storage
adapter.

Please note performance may greatly differs between deployments (e.g. request latency, database configuration) and
tweaking individual things may greatly improve performance. This is also not indicative of long-term performance as
database sizes grow. Take these results with a very large grain of salt.

All benchmarks run 10,000 requests in total, with 100 concurrent requests. All benchmarks run on a n1-highcpu-4
Compute Engine VM (4 vCPUs, 3.6GB memory) in the us-east1-b zone on Google Compute Engine. To provide enough entropy
for random number generation, haveged was installed and setup on the test machine. Where applicable, the
n1-standard-2 (2 vCPUs, 7.5 GB memory) machine type is used for the PostgreSQL instance using Google Cloud SQL
running in the same zone.

## BCrypt

$product uses BCrypt to obfuscate secrets of OAuth 2.0 Clients. When using flows such as the OAuth 2.0 Client Credentials
Grant, $product validates the client credentials using BCrypt which causes (by design) CPU load. CPU load and performance
depend on the BCrypt cost which can be set using the environment variable \`BCRYPT_COST\`. For these benchmarks,
we have set \`BCRYPT_COST=8\`.

EOF

SYSTEM_SECRET=AUQ6YFut538HjQ4DbW7msTDznrUMM7bp BCRYPT_COST=8 PUBLIC_PORT=9000 ADMIN_PORT=9001 ISSUER_URL=http://localhost:9000 $1 serve all --dangerous-force-http --disable-telemetry > /dev/null 2>&1 &

while ! echo exit | nc 127.0.0.1 9000; do sleep 1; done
while ! echo exit | nc 127.0.0.1 9001; do sleep 1; done

sleep 1

echo "Creating benchmark client"
hydra clients create \
    -g client_credentials \
    --id $clientId \
    --secret $clientSecret \
    -a foo \
    --endpoint http://localhost:9001

echo "Generating initial access tokens for token introspection benchmark"
authToken=$(hydra token client --endpoint http://localhost:9000 --client-id $clientId --client-secret $clientSecret)
introToken=$(hydra token client --endpoint http://localhost:9000 --client-id $clientId --client-secret $clientSecret)

cat >> $filename << EOF
## OAuth 2.0

This section contains various benchmarks against OAuth 2.0 endpoints

### Token Introspection

\`\`\`
EOF

hey -n $numReqs -c $numParallel -m POST \
    -H "Content-Type: application/x-www-form-urlencoded" \
    -d "token=$introToken" \
    http://localhost:9001/oauth2/introspect 2>&1 \
    | tee -a $filename


cat >> $filename << EOF
\`\`\`

### Client Credentials Grant

This endpoint uses [BCrypt](#bcrypt).

\`\`\`
EOF

hey -n $numReqs -c $numParallel -m POST \
	-H "Authorization: Basic $basicAuth" \
    -H "Content-Type: application/x-www-form-urlencoded" \
    -d "grant_type=client_credentials" \
    http://localhost:9000/oauth2/token 2>&1 \
    | tee -a $filename


cat >> $filename << EOF
\`\`\`

## OAuth 2.0 Client Management

### Creating OAuth 2.0 Clients

This endpoint uses [BCrypt](#bcrypt) and generates IDs and secrets by reading from `/dev/urandom` which negatively impacts
performance. Performance will be better if IDs and secrets are set in the request as opposed to generated by Hydra GCP.

\`\`\`
This test is currently disabled due to issues with /dev/urandom being inaccessible in the CI.
EOF

##hey -n $numReqs -c $numParallel -m POST \
#    -H "Content-Type: application/json" \
#    -d '{}' \
#    http://localhost:9001/clients 2>&1 \
#    | tee -a $filename

cat >> $filename << EOF
\`\`\`

### Listing OAuth 2.0 Clients

\`\`\`
EOF

hey -n $numReqs -c $numParallel -m GET \
    http://localhost:9001/clients 2>&1 \
    | tee -a $filename

cat >> $filename << EOF
\`\`\`

### Fetching a specific OAuth 2.0 Client

\`\`\`
EOF

hey -n $numReqs -c $numParallel -m GET \
    http://localhost:9001/clients/$clientId 2>&1 \
    | tee -a $filename

cat >> $filename << EOF
\`\`\`
EOF

kill %1

exit 0

sleep 5
